{"note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"learn unix in 10 minutes","google":"","name":"Unixin10mins","body":"Learn UNIX in 10 minutes. Version 1.3   \r\n\r\nPreface\r\n\r\nThis is something that I had given out to students (CAD user training) in years past. \r\nThe purpose was to have on one page the basics commands for getting started using \r\nthe UNIX shell (so that they didn't call me asking what to do the first time someone \r\ngave them a tape). \r\n\r\nThis document is copyrighted but freely redistributable under the terms of the GFDL . \r\n\r\nHave an idea for this page?  \r\nSend me patches, comments, corrections, about whatever you think is wrong or should be \r\nincluded. I am always happy to hear from you. Please include the word \"UNIX\" in your subject.\r\n\r\nSections:\r\n\r\nDirectories:\r\nMoving around the file system:\r\nListing directory contents:\r\nChanging file permissions and attributes\r\nMoving, renaming, and copying files:\r\nViewing and editing files:\r\nShells \r\nEnvironment variables\r\nInteractive History\r\nFilename Completion\r\nBash is the way cool shell. \r\nRedirection:\r\nPipes:\r\nCommand Substitution\r\nSearching for strings in files: The grep  command\r\nSearching for files : The find command\r\nReading and writing tapes, backups, and archives: The tar command  \r\nFile compression: compress, gzip, and bzip2\r\nLooking for help: The man and apropos commands\r\nBasics of the  vi editor\r\nFAQs\r\n\r\n******************************************************************************************\r\n   Basic UNIX Command Line (shell) navigation  : Last revised May 17 2001 \r\n******************************************************************************************\r\n\r\n\r\nDirectories:\r\n\r\n\r\nFile and directory paths in UNIX use the forward slash \"/\" \r\nto separate directory names in a path.\r\n\r\nexamples:\r\n\r\n/              \"root\" directory\r\n/usr           directory usr (sub-directory of / \"root\" directory)\r\n/usr/STRIM100  STRIM100 is a subdirectory of /usr\r\n\r\nMoving around the file system:\r\n\r\n\r\npwd               Show the \"present working directory\", or current directory.\r\ncd                Change current directory to your HOME directory.\r\ncd /usr/STRIM100  Change current directory to /usr/STRIM100.\r\ncd INIT           Change current directory to INIT which is a sub-directory of the current \r\n                        directory.\r\ncd ..             Change current directory to the parent directory of the current directory.\r\ncd $STRMWORK      Change current directory to the directory defined by the environment \r\n                        variable 'STRMWORK'.\r\ncd ~bob           Change the current directory to the user bob's home directory (if you have permission).\r\n\r\n\r\nListing directory contents:\r\n\r\n\r\nls    list a directory\r\nls -l    list a directory in long ( detailed ) format\r\n\r\n   for example:\r\n$ ls -l \r\ndrwxr-xr-x    4 cliff    user        1024 Jun 18 09:40 WAITRON_EARNINGS\r\n-rw-r--r--    1 cliff    user      767392 Jun  6 14:28 scanlib.tar.gz\r\n^ ^  ^  ^     ^   ^       ^           ^      ^    ^      ^\r\n| |  |  |     |   |       |           |      |    |      |  \r\n| |  |  |     | owner   group       size   date  time    name \r\n| |  |  |     number of links to file or directory contents\r\n| |  |  permissions for world\r\n| |  permissions for members of group\r\n| permissions for owner of file: r = read, w = write, x = execute -=no permission\r\ntype of file: - = normal file, d=directory, l = symbolic link, and others...\r\n\r\nls -a        List the current directory including hidden files. Hidden files start \r\n             with \".\" \r\nls -ld *     List all the file and directory names in the current directory using \r\n             long format. Without the \"d\" option, ls would list the contents \r\n             of any sub-directory of the current. With the \"d\" option, ls \r\n             just lists them like regular files. \r\n\r\n\r\nChanging file permissions and attributes\r\n\r\n\r\nchmod 755 file       Changes the permissions of file to be rwx for the owner, and rx for \r\n                     the group and the world. (7 = rwx = 111 binary. 5 = r-x = 101 binary)\r\nchgrp user file      Makes file belong to the group user.\r\nchown cliff file     Makes cliff the owner of file.\r\nchown -R cliff dir   Makes cliff the owner of dir and everything in its directory tree. \r\n\r\nYou must be the owner of the file/directory or be root before you can do any of these things. \r\n\r\nMoving, renaming, and copying files:\r\n\r\n\r\ncp file1 file2          copy a file\r\nmv file1 newname        move or rename a file\r\nmv file1 ~/AAA/         move file1 into sub-directory AAA in your home directory.\r\nrm file1 [file2 ...]    remove or delete a file\r\nrm -r dir1 [dir2...]    recursivly remove a directory and its contents BE CAREFUL!\r\nmkdir dir1 [dir2...]    create directories\r\nmkdir -p dirpath        create the directory dirpath, including all implied directories in the path.\r\nrmdir dir1 [dir2...]    remove an empty directory\r\n\r\n\r\nViewing and editing files:\r\n\r\n\r\ncat filename      Dump a file to the screen in ascii. \r\nmore filename     Progressively dump a file to the screen: ENTER = one line down \r\n                  SPACEBAR = page down  q=quit\r\nless filename     Like more, but you can use Page-Up too. Not on all systems. \r\nvi filename       Edit a file using the vi editor. All UNIX systems will have vi in some form. \r\nemacs filename    Edit a file using the emacs editor. Not all systems will have emacs. \r\nhead filename     Show the first few lines of a file.\r\nhead -n  filename Show the first n lines of a file.\r\ntail filename     Show the last few lines of a file.\r\ntail -n filename  Show the last n lines of a file.\r\n\r\n\r\nShells \r\n\r\n\r\nThe behavior of the command line interface will differ slightly depending \r\non the shell program that is being used. \r\n\r\nDepending on the shell used, some extra behaviors can be quite nifty.\r\n\r\nYou can find out what shell you are using by the command:\r\n\r\n    echo $SHELL\r\n\r\nOf course you can create a file with a list of shell commands and execute it like\r\na program to perform a task. This is called a shell script. This is in fact the \r\nprimary purpose of most shells, not the interactive command line behavior. \r\n\r\n\r\nEnvironment variables\r\n\r\n\r\nYou can teach your shell to remember things for later using environment variables.\r\nFor example under the bash shell:\r\n\r\nexport CASROOT=/usr/local/CAS3.0               Defines the variable CASROOT with the value \r\n                                               /usr/local/CAS3.0.\r\nexport LD_LIBRARY_PATH=$CASROOT/Linux/lib      Defines the variable LD_LIBRARY_PATH with \r\n                                               the value of CASROOT with /Linux/lib appended, \r\n                                               or /usr/local/CAS3.0/Linux/lib \r\n\r\nBy prefixing $ to the variable name, you can evaluate it in any command:\r\n\r\ncd $CASROOT         Changes your present working directory to the value of CASROOT\r\n\r\necho $CASROOT       Prints out the value of CASROOT, or /usr/local/CAS3.0\r\nprintenv CASROOT    Does the same thing in bash and some other shells. \r\n\r\n\r\nInteractive History\r\n\r\n\r\nA feature of bash and tcsh (and sometimes others) you can use \r\nthe up-arrow keys to access your previous commands, edit \r\nthem, and re-execute them.\r\n\r\n\r\nFilename Completion\r\n\r\n\r\nA feature of bash and tcsh (and possibly others) you can use the\r\nTAB key to complete a partially typed filename. For example if you\r\nhave a file called constantine-monks-and-willy-wonka.txt in your \r\ndirectory and want to edit it you can type 'vi const', hit the TAB key, \r\nand the shell will fill in the rest of the name for you (provided the \r\ncompletion is unique).\r\n\r\n\r\nBash is the way cool shell. \r\n\r\nBash will even complete the name of commands and environment variables.\r\nAnd if there are multiple completions, if you hit TAB twice bash will show\r\nyou all the completions. Bash is the default user shell for most Linux systems. \r\n\r\n\r\nRedirection:\r\n\r\n\r\ngrep string filename > newfile           Redirects the output of the above grep\r\n                                         command to a file 'newfile'.\r\ngrep string filename >> existfile        Appends the output of the grep command \r\n                                         to the end of 'existfile'.\r\n\r\nThe redirection directives, > and >> can be used on the output of most commands \r\nto direct their output to a file.\r\n\r\nPipes:\r\n\r\n\r\nThe pipe symbol \"|\" is used to direct the output of one command to the input \r\nof another.\r\n\r\nFor example:\r\n\r\nls -l | more   This commands takes the output of the long format directory list command \r\n               \"ls -l\" and pipes it through the more command (also known as a filter).\r\n               In this case a very long list of files can be viewed a page at a time.\r\n\r\ndu -sc * | sort -n | tail  \r\n               The command \"du -sc\" lists the sizes of all files and directories in the \r\n               current working directory. That is piped through \"sort -n\" which orders the \r\n               output from smallest to largest size. Finally, that output is piped through \"tail\"\r\n               which displays only the last few (which just happen to be the largest) results.\r\n\r\nCommand Substitution\r\n\r\n\r\nYou can use the output of one command as an input to another command in another way \r\ncalled command substitution. Command substitution is invoked when by enclosing the \r\nsubstituted command in backwards single quotes. For example:\r\n\r\ncat `find . -name aaa.txt`\r\n\r\nwhich will cat ( dump to the screen ) all the files named aaa.txt that exist in the current \r\ndirectory or in any subdirectory tree. \r\n\r\n\r\n\r\nSearching for strings in files: The grep  command\r\n\r\n\r\ngrep string filename    prints all the lines in a file that contain the string\r\n\r\n\r\nSearching for files : The find command\r\n\r\n\r\nfind search_path -name filename \r\n\r\nfind . -name aaa.txt    Finds all the files named aaa.txt in the current directory or \r\n                        any subdirectory tree. \r\nfind / -name vimrc      Find all the files named 'vimrc' anywhere on the system. \r\nfind /usr/local/games -name \"*xpilot*\"       \r\n                        Find all files whose names contain the string 'xpilot' which \r\n                        exist within the '/usr/local/games' directory tree. \r\n\r\n\r\nReading and writing tapes, backups, and archives: The tar command  \r\n\r\n\r\nThe tar command stands for \"tape archive\". It is the \"standard\" way to read \r\nand write archives (collections of files and whole directory trees).\r\n\r\nOften you will find archives of stuff with names like stuff.tar, or stuff.tar.gz.  This \r\nis stuff in a tar archive, and stuff in a tar archive which has been compressed using the\r\ngzip compression program respectivly. \r\n\r\nChances are that if someone gives you a tape written on a UNIX system, it will be in tar format, \r\nand you will use tar (and your tape drive) to read it. \r\n\r\nLikewise, if you want to write a tape to give to someone else, you should probably use \r\ntar as well. \r\n\r\nTar examples:\r\n\r\ntar xv      Extracts (x) files from the default tape drive while listing (v = verbose) \r\n            the file names to the screen.\r\ntar tv      Lists the files from the default tape device without extracting them. \r\ntar cv file1 file2      \r\n            Write files 'file1' and 'file2' to the default tape device.\r\ntar cvf archive.tar file1 [file2...]   \r\n            Create a tar archive as a file \"archive.tar\" containing file1, \r\n            file2...etc.\r\ntar xvf archive.tar  extract from the archive file\r\ntar cvfz archive.tar.gz dname    \r\n            Create a gzip compressed tar archive containing everything in the directory \r\n            'dname'. This does not work with all versions of tar.\r\ntar xvfz archive.tar.gz          \r\n            Extract a gzip compressed tar archive.  Does not work with all versions of tar. \r\ntar cvfI archive.tar.bz2 dname   \r\n            Create a bz2 compressed tar archive. Does not work with all versions of tar\r\n\r\n\r\nFile compression: compress, gzip, and bzip2\r\n\r\n\r\nThe standard UNIX compression commands are compress and uncompress. Compressed files have \r\na suffix .Z added to their name. For example:\r\n\r\ncompress part.igs    Creates a compressed file part.igs.Z\r\n\r\nuncompress part.igs  Uncompresseis part.igs from the compressed file part.igs.Z.\r\n                     Note the .Z is not required.\r\n\r\nAnother common compression utility is gzip (and gunzip). These are the GNU compress and \r\nuncompress utilities.  gzip usually gives better compression than standard compress, \r\nbut may not be installed on all systems.  The suffix for gzipped files is .gz\r\n\r\ngzip part.igs     Creates a compressed file part.igs.gz\r\ngunzip part.igs   Extracts the original file from part.igs.gz\r\n\r\nThe bzip2 utility has (in general) even better compression than gzip, but at the cost of longer \r\ntimes to compress and uncompress the files. It is not as common a utility as gzip, but is \r\nbecoming more generally available. \r\n\r\nbzip2 part.igs       Create a compressed Iges file part.igs.bz2\r\nbunzip2 part.igs.bz2 Uncompress the compressed iges file. \r\n\r\n\r\n\r\nLooking for help: The man and apropos commands\r\n\r\nMost of the commands have a manual page which give sometimes useful, often more or less \r\ndetailed, sometimes cryptic and unfathomable discriptions of their usage. Some say they \r\nare called man pages because they are only for real men. \r\n\r\nExample:\r\n\r\nman ls      Shows the manual page for the ls command\r\n\r\nYou can search through the man pages using apropos\r\n\r\nExample:\r\n\r\napropos build     Shows a list of all the man pages whose discriptions contain the word \"build\"\r\n\r\nDo a man apropos for detailed help on apropos.\r\n\r\n\r\nBasics of the  vi editor\r\n\r\n                Opening a file\r\nvi filename\r\n\r\n                Creating text \r\nEdit modes: These keys enter editing modes and type in the text\r\nof your document. \r\n\r\ni     Insert before current cursor position\r\nI     Insert at beginning of current line\r\na     Insert (append) after current cursor position\r\nA     Append to end of line\r\nr     Replace 1 character\r\nR     Replace mode\r\n<ESC> Terminate insertion or overwrite mode\r\n\r\n                 Deletion of text\r\n\r\nx     Delete single character\r\ndd    Delete current line and put in buffer\r\nndd   Delete n lines (n is a number) and put them in buffer\r\nJ     Attaches the next line to the end of the current line (deletes carriage return).\r\n\r\n                 Oops\r\n\r\nu     Undo last command\r\n\r\n                 cut and paste\r\nyy    Yank current line into buffer\r\nnyy   Yank n lines into buffer\r\np     Put the contents of the buffer after the current line\r\nP     Put the contents of the buffer before the current line\r\n\r\n                cursor positioning\r\n^d    Page down\r\n^u    Page up\r\n:n    Position cursor at line n\r\n:$    Position cursor at end of file\r\n^g    Display current line number\r\nh,j,k,l Left,Down,Up, and Right respectivly. Your arrow keys should also work if\r\n      if your keyboard mappings are anywhere near sane.\r\n\r\n               string substitution\r\n\r\n:n1,n2:s/string1/string2/[g]       Substitute string2 for string1 on lines\r\n                                   n1 to n2. If g is included (meaning global),  \r\n                                   all instances of string1 on each line\r\n                                   are substituted. If g is not included,\r\n                                   only the first instance per matching line is\r\n                                   substituted.\r\n\r\n    ^ matches start of line\r\n    . matches any single character\r\n    $ matches end of line\r\n\r\nThese and other \"special characters\" (like the forward slash) can be \"escaped\" with \\\r\ni.e to match the string \"/usr/STRIM100/SOFT\" say \"\\/usr\\/STRIM100\\/SOFT\" \r\n\r\nExamples:\r\n\r\n:1,$:s/dog/cat/g                   Substitute 'cat' for 'dog', every instance\r\n                                   for the entire file - lines 1 to $ (end of file)\r\n\r\n:23,25:/frog/bird/                 Substitute 'bird' for 'frog' on lines\r\n                                   23 through 25. Only the first instance \r\n                                   on each line is substituted.\r\n\r\n\r\n              Saving and quitting and other \"ex\" commands\r\n\r\nThese commands are all prefixed by pressing colon (:) and then entered in the lower\r\nleft corner of the window. They are called \"ex\" commands because they are commands\r\nof the ex text editor - the precursor line editor to the screen editor \r\nvi.   You cannot enter an \"ex\" command when you are in an edit mode (typing text onto the screen)\r\nPress <ESC> to exit from an editing mode.\r\n\r\n:w                Write the current file.\r\n:w new.file       Write the file to the name 'new.file'.\r\n:w! existing.file Overwrite an existing file with the file currently being edited. \r\n:wq               Write the file and quit.\r\n:q                Quit.\r\n:q!               Quit with no changes.\r\n\r\n:e filename       Open the file 'filename' for editing.\r\n\r\n:set number       Turns on line numbering\r\n:set nonumber     Turns off line numbering\r\n\r\nreferenced from:http://freeengineer.org/learnUNIXin10minutes.html"}